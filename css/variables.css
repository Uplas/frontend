/* css/variables.css */
/* ================================================
   Uplas Global CSS Variables (variables.css)
   ================================================ */

:root {
    /* Core Color Palette (Uplas Brand Identity) */
    --color-primary: #00b4d8;          /* Skyblue - Main Accent */
    --color-primary-dark: #0077b6;     /* Darker Skyblue for hovers/active states */
    --color-primary-light: #72d2e8;    /* Lighter Skyblue for subtle accents */
    --color-primary-ultralight: rgba(0, 180, 216, 0.1); /* For subtle backgrounds/hovers */

    --color-secondary: #3d405b;        /* Luxury Black / Dark Blue-Gray - For text, dark backgrounds */
    --color-secondary-dark: #2c2e43;   /* Darker shade of secondary */
    --color-secondary-light: #5a6181;  /* Lighter shade of secondary */

    --color-accent: #f4a261;           /* Orange Accent - For CTAs or highlights */
    --color-accent-dark: #e76f51;      /* Darker Orange */
    --color-accent-light: #f6b98a;     /* Lighter Orange */

    /* Functional Colors */
    --color-success: #28a745;          /* Green for success messages, confirmations */
    --color-success-light: rgba(40, 167, 69, 0.1);
    --color-error: #dc3545;            /* Red for errors, warnings */
    --color-error-light: rgba(220, 53, 69, 0.1);
    --color-warning: #ffc107;          /* Yellow for warnings, attention */
    --color-warning-light: rgba(255, 193, 7, 0.1);
    --color-info: var(--color-primary);/* Using primary for info accents */
    --color-info-light: var(--color-primary-ultralight);

    /* Neutral & Grayscale Palette */
    --color-white: #ffffff;
    --color-black: #121212;            /* True black for specific elements if needed */
    --color-gray-100: #f8f9fa;         /* Very light gray, almost white */
    --color-gray-200: #f4f1de;         /* Light Cream - Main light page background */
    --color-gray-300: #e9ecef;         /* Light gray for borders, dividers */
    --color-gray-400: #dee2e6;         /* Slightly darker gray for borders */
    --color-gray-500: #ced4da;         /* Medium gray for input borders */
    --color-gray-600: #adb5bd;         /* Text secondary on light backgrounds */
    --color-gray-700: #5a5f73;         /* Softer secondary text for light mode */
    --color-gray-800: #333745;         /* Primary text on light backgrounds (Softer Black) */
    --color-gray-900: #212529;         /* Darker gray, near black */

    /* Dark Mode Specific Base Colors */
    --color-dark-bg-primary: #1a1c23;      /* Primary dark background (very dark blue/gray) */
    --color-dark-bg-secondary: #222430;    /* Secondary dark background (slightly lighter) */
    --color-dark-bg-panel: #2d2f3e;        /* For cards/panels in dark mode */
    --color-dark-bg-input: #3a3f51;        /* Dark mode input background */
    --color-dark-border-primary: #404552;  /* Primary dark mode border */
    --color-dark-border-secondary: #505562;/* Slightly lighter dark border */
    --color-dark-text-primary: var(--color-gray-100); /* Primary text on dark backgrounds */
    --color-dark-text-secondary: var(--color-gray-600); /* Secondary text on dark backgrounds */


    /* Typography */
    --font-primary: 'Poppins', sans-serif;
    --font-size-base: 16px;
    --font-size-xs: 0.75rem;    /* 12px */
    --font-size-sm: 0.875rem;   /* 14px */
    --font-size-md: 1rem;       /* 16px */
    --font-size-lg: 1.125rem;   /* 18px */
    --font-size-xl: 1.5rem;     /* 24px */
    --font-size-xxl: 2rem;      /* 32px */
    --font-size-hero: clamp(2.2rem, 6vw, 3.5rem); /* Responsive hero title */

    --line-height-base: 1.65;
    --line-height-heading: 1.3;

    --font-weight-light: 300;
    --font-weight-regular: 400;
    --font-weight-medium: 500;
    --font-weight-semibold: 600;
    --font-weight-bold: 700;

    /* Spacing */
    --spacing-xxs: 0.25rem;  /* 4px */
    --spacing-xs: 0.5rem;   /* 8px */
    --spacing-sm: 0.75rem;  /* 12px */
    --spacing-md: 1rem;     /* 16px */
    --spacing-lg: 1.5rem;   /* 24px */
    --spacing-xl: 2rem;     /* 32px */
    --spacing-xxl: 3rem;    /* 48px */
    --spacing-xxxl: 4rem;   /* 64px */

    /* Borders & Shadows */
    --border-radius-sm: 4px;
    --border-radius-md: 8px;
    --border-radius-lg: 12px;
    --border-radius-xl: 16px;
    --border-radius-pill: 9999px;
    --border-width: 1px;
    --border-width-bold: 2px;

    --box-shadow-xs: 0 1px 2px rgba(0, 0, 0, 0.04);
    --box-shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.06);
    --box-shadow-md: 0 5px 12px -1px rgba(0, 0, 0, 0.08), 0 3px 7px -2px rgba(0, 0, 0, 0.05);
    --box-shadow-lg: 0 12px 20px -3px rgba(0, 0, 0, 0.1), 0 5px 8px -4px rgba(0, 0, 0, 0.06);
    --box-shadow-xl: 0 20px 30px -5px rgba(0, 0, 0, 0.12), 0 10px 15px -6px rgba(0, 0, 0, 0.08);
    --box-shadow-focus: 0 0 0 3px var(--color-primary-ultralight);
    --box-shadow-focus-error: 0 0 0 3px var(--color-error-light);

    /* Transitions */
    --transition-short: 0.15s ease-out;
    --transition-base: 0.25s ease-out;
    --transition-long: 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);

    /* Layout Specific */
    --header-height: 70px; /* Standard Uplas header height */
    --container-max-width: 1200px;
    --container-padding-x: var(--spacing-lg);


    /* === THEME-DEPENDENT VARIABLES (Light Mode Defaults) === */
    --current-bg-color: var(--color-gray-200); /* Main page background */
    --current-text-color: var(--color-gray-800); /* Primary text on light bg */
    --current-text-color-secondary: var(--color-gray-700); /* Secondary text on light bg */
    --current-card-bg: var(--color-white); /* Panel/card background */
    --current-border-color: var(--color-gray-400); /* Standard border */
    --current-border-color-light: var(--color-gray-300); /* Lighter border for dividers */
    --current-input-bg: var(--color-white);
    --current-input-border-color: var(--color-gray-500);
    --current-input-text-color: var(--color-gray-800);
    --current-input-placeholder-color: var(--color-gray-600);
    --current-link-color: var(--color-primary);
    --current-link-hover-color: var(--color-primary-dark);
    --current-header-bg: var(--color-white);
    --current-footer-bg: var(--color-secondary-dark);
    --current-footer-text-color: var(--color-gray-600); /* Muted text for footer */

    /* Button Theming */
    --current-button-primary-bg: var(--color-primary);
    --current-button-primary-text: var(--color-white);
    --current-button-primary-hover-bg: var(--color-primary-dark);
    --current-button-primary-border: var(--color-primary);

    --current-button-secondary-bg: transparent;
    --current-button-secondary-text: var(--color-secondary);
    --current-button-secondary-border: var(--color-secondary);
    --current-button-secondary-hover-bg: var(--color-secondary);
    --current-button-secondary-hover-text: var(--color-white);
}

.dark-mode {
    --current-bg-color: var(--color-dark-bg-secondary);
    --current-text-color: var(--color-dark-text-primary);
    --current-text-color-secondary: var(--color-dark-text-secondary);
    --current-card-bg: var(--color-dark-bg-panel);
    --current-border-color: var(--color-dark-border-primary);
    --current-border-color-light: var(--color-dark-border-secondary);
    --current-input-bg: var(--color-dark-bg-input);
    --current-input-border-color: var(--color-dark-border-primary);
    --current-input-text-color: var(--color-dark-text-primary);
    --current-input-placeholder-color: var(--color-dark-text-secondary);
    --current-link-color: var(--color-primary-light);
    --current-link-hover-color: var(--color-white);
    --current-header-bg: var(--color-dark-bg-panel);
    --current-footer-bg: var(--color-dark-bg-primary);
    --current-footer-text-color: var(--color-dark-text-secondary);

    /* Button Theming - Dark Mode */
    --current-button-primary-bg: var(--color-primary);
    --current-button-primary-text: var(--color-black); /* Dark text on primary for contrast in dark mode */
    --current-button-primary-hover-bg: var(--color-primary-light);
    --current-button-primary-border: var(--color-primary);

    --current-button-secondary-text: var(--color-primary-light);
    --current-button-secondary-border: var(--color-primary-light);
    --current-button-secondary-hover-bg: var(--color-primary-light);
    --current-button-secondary-hover-text: var(--color-black);
}
```

```javascript
// js/global.js
/* ================================================
   Uplas Global JavaScript (global.js)
   - Theme Toggle
   - Mobile Navigation
   - Language Switcher (Basic Structure)
   - Currency Switcher (Basic Structure)
   - Common Utility Functions
   ================================================ */
'use strict';

document.addEventListener('DOMContentLoaded', () => {
    const body = document.body;
    const htmlElement = document.documentElement;

    // --- 1. Theme Toggle ---
    const themeToggleButton = document.getElementById('theme-toggle');

    const updateThemeButtonAppearance = (isDarkMode) => {
        if (!themeToggleButton) return;
        const themeTextSpan = themeToggleButton.querySelector('.theme-text');
        const moonIcon = themeToggleButton.querySelector('.theme-icon--dark');
        const sunIcon = themeToggleButton.querySelector('.theme-icon--light');

        themeToggleButton.setAttribute('aria-label', isDarkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode');
        themeToggleButton.setAttribute('title', isDarkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode');

        if (themeTextSpan) {
            themeTextSpan.textContent = isDarkMode ? 'Light Mode' : 'Dark Mode';
        }
        if (moonIcon) moonIcon.style.display = isDarkMode ? 'none' : 'inline-block';
        if (sunIcon) sunIcon.style.display = isDarkMode ? 'inline-block' : 'none';
    };

    const applyThemePreference = () => {
        const savedDarkMode = localStorage.getItem('uplasGlobalTheme');
        const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        let isDarkMode;

        if (savedDarkMode !== null) {
            isDarkMode = savedDarkMode === 'true';
        } else {
            isDarkMode = systemPrefersDark;
            localStorage.setItem('uplasGlobalTheme', isDarkMode);
        }

        body.classList.toggle('dark-mode', isDarkMode);
        updateThemeButtonAppearance(isDarkMode);
    };

    if (themeToggleButton) {
        themeToggleButton.addEventListener('click', () => {
            const isCurrentlyDark = body.classList.contains('dark-mode');
            const newIsDarkMode = !isCurrentlyDark;
            body.classList.toggle('dark-mode', newIsDarkMode);
            localStorage.setItem('uplasGlobalTheme', newIsDarkMode);
            updateThemeButtonAppearance(newIsDarkMode);
        });
    }
    applyThemePreference();

    // --- 2. Mobile Navigation Toggle ---
    const mobileNavToggleButton = document.getElementById('mobile-nav-toggle');
    const mainNavigation = document.getElementById('main-navigation');

    if (mobileNavToggleButton && mainNavigation) {
        mobileNavToggleButton.addEventListener('click', () => {
            const isExpanded = mobileNavToggleButton.getAttribute('aria-expanded') === 'true' || false;
            mobileNavToggleButton.setAttribute('aria-expanded', !isExpanded);
            mainNavigation.classList.toggle('nav--open');
            const icon = mobileNavToggleButton.querySelector('i');
            if (icon) {
                icon.classList.toggle('fa-bars', isExpanded);
                icon.classList.toggle('fa-times', !isExpanded);
            }
        });
    }

    // --- 3. Language Switcher ---
    const languageSelector = document.getElementById('language-selector');
    let currentTranslations = {}; // To hold loaded translation strings

    // In a real app, these would be more extensive or dynamically loaded
    const simpleTranslations = {
        en: {
            "site_title": "Uplas | Master AI, Secure Your Future.",
            "hero_title": "The AI Revolution is Here. Are You Ready?",
            "hero_subtitle": "Uplas empowers Professionals and Students to Upskill or Reskill with Personalized AI Learning.",
            "get_started_free_cta": "Get Started Free",
            "explore_plans_cta": "Explore Plans",
            // ... more keys
        },
        es: {
            "site_title": "Uplas | Domina la IA, Asegura tu Futuro.",
            "hero_title": "La Revolución de la IA está Aquí. ¿Estás Listo?",
            "hero_subtitle": "Uplas capacita a Profesionales y Estudiantes para Mejorar o Reorientar sus habilidades con Aprendizaje de IA Personalizado.",
            "get_started_free_cta": "Comienza Gratis",
            "explore_plans_cta": "Explorar Planes",
            // ... more keys
        },
        // Add more languages here as JSON objects from your locales/ folder
        // Example for French (fr.json would contain these)
        // fr: {
        //     "site_title": "Uplas | Maîtrisez l'IA, Sécurisez Votre Avenir.",
        //     "hero_title": "La Révolution de l'IA est là. Êtes-vous Prêt ?",
        //     "hero_subtitle": "Uplas permet aux Professionnels et aux Étudiants de se perfectionner ou de se reconvertir grâce à un Apprentissage Personnalisé de l'IA.",
        // }
    };

    async function loadTranslations(lang) {
        try {
            // In a real app, you'd fetch from `/locales/${lang}.json`
            // const response = await fetch(`/locales/${lang}.json`);
            // if (!response.ok) throw new Error(`Could not load translations for ${lang}`);
            // currentTranslations = await response.json();
            currentTranslations = simpleTranslations[lang] || simpleTranslations.en; // Fallback to English
            console.log(`Translations for ${lang} loaded (simulated).`);
        } catch (error) {
            console.error("Error loading translation file:", error);
            currentTranslations = simpleTranslations.en; // Fallback
        }
    }

    function translatePage() {
        document.querySelectorAll('[data-translate-key]').forEach(element => {
            const key = element.dataset.translateKey;
            if (currentTranslations[key]) {
                // Handle different element types (input placeholders, text content, etc.)
                if (element.tagName === 'INPUT' && element.placeholder) {
                    element.placeholder = currentTranslations[key];
                } else if (element.title) {
                    // Could also translate titles if needed
                } else {
                    element.textContent = currentTranslations[key];
                }
            }
        });
        // Update page title separately if needed
        const pageTitleKey = document.title_translation_key || "site_title"; // If you set a specific key for title
        if(currentTranslations[pageTitleKey]) {
            document.title = currentTranslations[pageTitleKey];
        }
    }

    async function applyLanguagePreference(lang) {
        if (!lang) return;
        htmlElement.lang = lang;
        await loadTranslations(lang);
        translatePage();
        // You might want to inform backend about language change for emails, etc.
        // fetchAuthenticated('/api/user/preferences', { method: 'POST', body: JSON.stringify({ language: lang }) });
    }

    if (languageSelector) {
        const savedLang = localStorage.getItem('uplasPreferredLanguage') || navigator.language.split('-')[0] || 'en';
        languageSelector.value = savedLang; // Ensure select shows current lang
        applyLanguagePreference(savedLang);

        languageSelector.addEventListener('change', (event) => {
            const selectedLang = event.target.value;
            localStorage.setItem('uplasPreferredLanguage', selectedLang);
            applyLanguagePreference(selectedLang);
        });
    } else {
        // Apply default language even if selector is not present on the page
        const defaultLang = localStorage.getItem('uplasPreferredLanguage') || navigator.language.split('-')[0] || 'en';
        applyLanguagePreference(defaultLang);
    }

    // --- 4. Currency Switcher & Display ---
    const currencySelector = document.getElementById('currency-selector');
    const priceElements = document.querySelectorAll('[data-price-usd]'); // e.g., <span data-price-usd="19.99"></span>

    // This would ideally come from a backend or reliable API
    const simulatedExchangeRates = {
        'USD': 1.00,
        'EUR': 0.92,
        'GBP': 0.79,
        'KES': 130.50, // Example Kenyan Shilling
        'INR': 83.30  // Example Indian Rupee
        // Add more as needed
    };

    async function updateUserCurrencyDisplay() {
        if (priceElements.length === 0) return;

        let targetCurrency = 'USD'; // Default
        if (currencySelector) {
            targetCurrency = currencySelector.value;
        } else {
            // Attempt to get from localStorage or geolocation (more complex)
            targetCurrency = localStorage.getItem('uplasUserCurrency') || 'USD'; // Fallback to USD
            // Geolocation logic would go here to suggest a default.
            // For now, we rely on explicit selection or stored preference.
        }

        const rate = simulatedExchangeRates[targetCurrency] || 1.00; // Fallback to USD if rate not found

        priceElements.forEach(el => {
            const priceUSD = parseFloat(el.dataset.priceUsd);
            if (!isNaN(priceUSD)) {
                const convertedPrice = priceUSD * rate;
                // Use Intl.NumberFormat for proper currency formatting
                try {
                    el.textContent = new Intl.NumberFormat(undefined, { // Use user's locale for formatting
                        style: 'currency',
                        currency: targetCurrency,
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    }).format(convertedPrice);
                } catch (e) { // Fallback for unsupported currency codes by Intl
                    el.textContent = `${targetCurrency} ${convertedPrice.toFixed(2)}`;
                }
            }
        });
        if (currencySelector) currencySelector.value = targetCurrency; // Ensure selector is up-to-date
    }


    if (currencySelector) {
        const savedCurrency = localStorage.getItem('uplasUserCurrency') || 'USD'; // Default or attempt to geolocate
        currencySelector.value = savedCurrency;
        currencySelector.addEventListener('change', (event) => {
            const selectedCurrency = event.target.value;
            localStorage.setItem('uplasUserCurrency', selectedCurrency);
            updateUserCurrencyDisplay();
        });
    }
    updateUserCurrencyDisplay(); // Initial display

    // --- 5. Common Utility Functions (exposed globally for other scripts) ---
    window.uplasScrollToElement = (selector) => {
        const targetElement = document.querySelector(selector);
        if (targetElement) {
            targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
    };

    window.uplasGetCookie = (name) => { /* ... (same as before) ... */ };

    console.log("Uplas global.js loaded and initialized with i18n & l10n placeholders.");
});
```

```html
<!DOCTYPE html>
<html lang="en"> <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title data-translate-key="site_title">Uplas | Master AI, Secure Your Future.</title>
    <link rel="icon" href="images/uni_plas_prev_ui.ico" type="image/x-icon">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" xintegrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <link rel="stylesheet" href="css/variables.css">
    <link rel="stylesheet" href="css/global.css"> <link rel="stylesheet" href="css/uhome.css">

    <meta name="description" content="Uplas empowers Professionals and Students to Upskill or Reskill with Personalized AI Learning. Master AI with our unique Q&A model and secure your place in the future workforce.">
    <meta name="keywords" content="AI learning, artificial intelligence, upskill, reskill, personalized learning, AI courses, AI projects, AI tutor">
    <meta name="theme-color" content="#00b4d8">
</head>
<body class="light-mode">

    <header class="header" id="page-header">
        <div class="container header__container">
            <a href="index.html" class="logo" aria-label="Uplas Homepage">
                <img src="images/uni_plas_prev_ui.ico" alt="Uplas Platform Logo" class="logo__img">
            </a>
            <nav class="nav" id="main-navigation" aria-label="Main site navigation">
                <ul class="nav__list">
                    <li class="nav__item"><a href="index.html" class="nav__link nav__link--active" aria-current="page" data-translate-key="nav_home">Home</a></li>
                    <li class="nav__item"><a href="ucourses_list.html" class="nav__link" data-translate-key="nav_courses">Courses</a></li>
                    <li class="nav__item"><a href="upricing.html" class="nav__link" data-translate-key="nav_pricing">Pricing</a></li>
                    <li class="nav__item"><a href="ublog.html" class="nav__link" data-translate-key="nav_blog">Blog</a></li>
                    <li class="nav__item"><a href="ucommunity.html" class="nav__link" data-translate-key="nav_community">Community</a></li>
                    <li class="nav__item"><a href="#auth-section" class="nav__link nav__link--cta" data-translate-key="nav_login_signup">Login/Sign Up</a></li>
                </ul>
            </nav>
            <div class="header-actions">
                <div class="language-currency-selectors">
                    <div class="select-wrapper">
                        <label for="language-selector" class="sr-only">Select Language</label>
                        <i class="fas fa-globe selector-icon"></i>
                        <select id="language-selector" class="header-select" title="Select Language">
                            <option value="en">English (EN)</option>
                            <option value="es">Español (ES)</option>
                            <option value="fr">Français (FR)</option>
                            {/* */}
                        </select>
                    </div>
                    <div class="select-wrapper">
                         <label for="currency-selector" class="sr-only">Select Currency</label>
                        <i class="fas fa-dollar-sign selector-icon"></i>
                        <select id="currency-selector" class="header-select" title="Select Currency">
                            <option value="USD">USD</option>
                            <option value="EUR">EUR</option>
                            <option value="GBP">GBP</option>
                            <option value="KES">KES</option>
                            <option value="INR">INR</option>
                            {/* */}
                        </select>
                    </div>
                </div>
                <button id="theme-toggle" class="button button--theme" aria-label="Switch to Dark Mode" title="Toggle theme">
                    <i class="fas fa-moon theme-icon theme-icon--dark" aria-hidden="true"></i>
                    <i class="fas fa-sun theme-icon theme-icon--light" aria-hidden="true" style="display:none;"></i>
                    <span class="sr-only" data-translate-key="toggle_theme_sr">Toggle Dark/Light Mode</span>
                </button>
            </div>
            <button class="nav__toggle" id="mobile-nav-toggle" aria-label="Toggle navigation menu" aria-expanded="false" aria-controls="main-navigation">
                <i class="fas fa-bars" aria-hidden="true"></i>
                <span class="sr-only" data-translate-key="toggle_navigation_sr">Menu</span>
            </button>
        </div>
    </header>

    <main class="main-content">

        <section class="hero-section">
            <div class="container hero-section__container">
                <div class="hero-section__text-content">
                    <h1 class="hero-section__title" data-translate-key="hero_title">The AI Revolution is Here. Are You Ready?</h1>
                    <p class="hero-section__subtitle" data-translate-key="hero_subtitle">Uplas empowers Professionals and Students to Upskill or Reskill with Personalized AI Learning. Master AI with our unique Q&A model and secure your place in the future workforce.</p>
                    <div class="hero-section__cta-group">
                        <a href="#auth-section" class="button button--primary button--large hero-section__cta" data-translate-key="get_started_free_cta">Get Started Free</a>
                        <a href="upricing.html" class="button button--secondary button--large hero-section__cta" data-translate-key="explore_plans_cta">Explore Plans</a>
                    </div>
                </div>
                <div class="hero-section__media-content">
                    <div class="video-responsive-container">
                        <img src="images/uplas_hero_placeholder.png" alt="Abstract representation of AI learning and innovation, showing diverse individuals interacting with technology." style="width:100%; height:100%; object-fit:cover; border-radius: var(--border-radius-lg);">
                    </div>
                </div>
            </div>
        </section>

        <section class="benefits-section">
            <div class="container">
                <h2 class="section-title" data-translate-key="benefits_title">Why Uplas is Your Key to AI Mastery</h2>
                <p class="section-subtitle" data-translate-key="benefits_subtitle">Unlock unparalleled advantages and accelerate your AI journey with our cutting-edge platform.</p>
                <div class="benefits-grid">
                    <div class="benefit-item">
                        <img src="https://placehold.co/100x100/00b4d8/FFFFFF?text=AI&font=poppins" alt="Personalized Learning Icon" class="benefit-item__icon">
                        <h3 class="benefit-item__title" data-translate-key="benefit1_title">Hyper-Personalized Learning Paths</h3>
                        <p data-translate-key="benefit1_desc">Our AI tailors questions and content to your unique skill level and learning pace, ensuring you grasp concepts effectively and efficiently. No more one-size-fits-all.</p>
                    </div>
                    <div class="benefit-item">
                        <img src="https://placehold.co/100x100/3d405b/FFFFFF?text=💡&font=poppins" alt="AI Tutor Icon" class="benefit-item__icon">
                        <h3 class="benefit-item__title" data-translate-key="benefit2_title">24/7 AI Tutor Support</h3>
                        <p data-translate-key="benefit2_desc">Never get stuck. Our intelligent AI Tutor provides instant answers, explanations, and guidance whenever you need it, day or night.</p>
                    </div>
                    <div class="benefit-item">
                        <img src="https://placehold.co/100x100/f4a261/FFFFFF?text=💼&font=poppins" alt="Real-World Projects Icon" class="benefit-item__icon">
                        <h3 class="benefit-item__title" data-translate-key="benefit3_title">Portfolio-Ready AI Projects</h3>
                        <p data-translate-key="benefit3_desc">Move beyond theory. Apply your skills by building AI-generated, real-world projects that showcase your capabilities to potential employers.</p>
                    </div>
                    <div class="benefit-item">
                        <img src="https://placehold.co/100x100/0077b6/FFFFFF?text=🗣️&font=poppins" alt="Multi-Format Content Icon" class="benefit-item__icon">
                        <h3 class="benefit-item__title" data-translate-key="benefit4_title">Flexible Learning Formats</h3>
                        <p data-translate-key="benefit4_desc">Learn your way. Instantly convert answers and explanations into audio summaries or video walkthroughs with our integrated TTS and TTV technology.</p>
                    </div>
                    <div class="benefit-item">
                        <img src="https://placehold.co/100x100/28a745/FFFFFF?text=🌍&font=poppins" alt="Global Community Icon" class="benefit-item__icon">
                        <h3 class="benefit-item__title" data-translate-key="benefit5_title">Thriving Global Community</h3>
                        <p data-translate-key="benefit5_desc">Connect with fellow learners, mentors, and industry experts. Share insights, collaborate on projects, and network for future opportunities.</p>
                    </div>
                    <div class="benefit-item">
                        <img src="https://placehold.co/100x100/e76f51/FFFFFF?text=🏆&font=poppins" alt="Career Advancement Icon" class="benefit-item__icon">
                        <h3 class="benefit-item__title" data-translate-key="benefit6_title">Future-Proof Your Career</h3>
                        <p data-translate-key="benefit6_desc">Equip yourself with the most in-demand AI skills. Upskill for your current role or reskill for the AI-driven job market of tomorrow.</p>
                    </div>
                </div>
            </div>
        </section>

        <section class="feature-highlight-section" id="course-description-image-section">
            <div class="container feature-highlight__container">
                <div class="feature-highlight__image-container">
                    <img src="images/course_description_placeholder.png" alt="A student engaging with an Uplas AI course module on a tablet, with data visualizations in the background." class="feature-highlight__image">
                </div>
                <div class="feature-highlight__text-content">
                    <h2 class="section-title section-title--left-align" data-translate-key="course_desc_title">Dive Deep into Practical AI Applications</h2>
                    <p data-translate-key="course_desc_text">Our courses are meticulously designed to bridge the gap between theoretical knowledge and practical, real-world application. From understanding the core concepts of machine learning to deploying complex AI models, Uplas provides a hands-on, interactive learning experience. Each module is crafted to build upon the last, ensuring a comprehensive understanding that you can immediately apply to solve challenging problems and innovate in your field.</p>
                    <a href="ucourses_list.html" class="button button--primary" data-translate-key="explore_our_courses_cta">Explore Our Courses</a>
                </div>
            </div>
        </section>

        <section class="auth-section" id="auth-section">
            <div class="container auth-section__container">
                <div class="auth-toggle-buttons">
                    <button class="auth-toggle-button active" data-form="signup-form" data-translate-key="signup_tab">Sign Up</button>
                    <button class="auth-toggle-button" data-form="login-form" data-translate-key="login_tab">Login</button>
                </div>

                <div class="form-wrapper">
                    <form id="signup-form" class="form form--active" novalidate>
                        <h3 class="form__title" data-translate-key="signup_form_title">Create Your Uplas Account</h3>
                        
                        <div class="form-step form-step--active" data-step="1">
                            <p class="form__step-indicator" data-translate-key="signup_step1_indicator">Step 1 of 5: Basic Information</p>
                            <div class="form__group">
                                <label for="signup-full-name" class="form__label" data-translate-key="form_label_fullname">Full Name</label>
                                <input type="text" id="signup-full-name" name="fullName" class="form__input" placeholder="e.g., Jane Doe" pattern="[A-Za-zÀ-ÖØ-öø-ÿ ]{2,}" title="Please enter a valid name (at least 2 characters, letters and spaces only)" required>
                                <span class="form__error-message" aria-live="polite"></span>
                            </div>
                            <button type="button" class="button button--primary form__button form__button--next" data-translate-key="form_button_next">Next <i class="fas fa-arrow-right"></i></button>
                        </div>

                        {/* ... Other signup steps with data-translate-key attributes for labels and placeholders ... */}
                        <div class="form-step" data-step="5">
                            <p class="form__step-indicator" data-translate-key="signup_step5_indicator">Step 5 of 5: Secure Your Account</p>
                            <div class="form__group">
                                <label for="signup-password" class="form__label" data-translate-key="form_label_create_password">Create Password</label>
                                <input type="password" id="signup-password" name="password" class="form__input" placeholder="Choose a strong password" pattern="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=\[\]{};':\\|,.<>\/?]).{8,}$" title="Password must be at least 8 characters and include uppercase, lowercase, number, and special character." required>
                                <span class="form__error-message" aria-live="polite"></span>
                                <small class="form__hint" data-translate-key="form_hint_password">Min. 8 characters, with uppercase, lowercase, number, and special symbol.</small>
                            </div>
                            <div class="form__group">
                                <label for="signup-confirm-password" class="form__label" data-translate-key="form_label_confirm_password">Confirm Password</label>
                                <input type="password" id="signup-confirm-password" name="confirmPassword" class="form__input" placeholder="Re-enter your password" required>
                                <span class="form__error-message" id="signup-password-mismatch" aria-live="polite"></span>
                            </div>
                            <div class="form__group form__group--checkbox">
                                <input type="checkbox" id="signup-terms" name="terms" required>
                                <label for="signup-terms" class="form__label--checkbox" data-translate-key="form_label_terms">I agree to the Uplas <a href="/terms" target="_blank">Terms of Service</a> and <a href="/privacy" target="_blank">Privacy Policy</a>.</label>
                                <span class="form__error-message" aria-live="polite"></span>
                            </div>
                            <div class="form__button-group">
                                <button type="button" class="button button--secondary form__button form__button--prev" data-translate-key="form_button_prev"><i class="fas fa-arrow-left"></i> Previous</button>
                                <button type="submit" class="button button--primary form__button form__button--submit" data-translate-key="form_button_create_account">Create Account</button>
                            </div>
                        </div>
                        <div id="signup-status" class="form__status" aria-live="assertive"></div>
                    </form>

                    <form id="login-form" class="form" novalidate>
                        <h3 class="form__title" data-translate-key="login_form_title">Welcome Back to Uplas!</h3>
                        <div class="form__group">
                            <label for="login-email" class="form__label" data-translate-key="form_label_email">Email Address</label>
                            <input type="email" id="login-email" name="email" class="form__input" placeholder="you@example.com" required>
                            <span class="form__error-message" aria-live="polite"></span>
                        </div>
                        <div class="form__group">
                            <label for="login-password" class="form__label" data-translate-key="form_label_password">Password</label>
                            <input type="password" id="login-password" name="password" class="form__input" placeholder="Enter your password" required>
                            <span class="form__error-message" aria-live="polite"></span>
                        </div>
                        <div class="form__group form__group--subtle-text">
                            <a href="#forgot-password" class="form__link" data-translate-key="form_link_forgot_password">Forgot password?</a>
                        </div>
                        <button type="submit" class="button button--primary form__button form__button--submit" data-translate-key="form_button_login">Login</button>
                        <div id="login-status" class="form__status" aria-live="assertive"></div>
                    </form>
                </div>
            </div>
        </section>

        <section class="faq-section">
             <div class="container">
                <h2 class="section-title" data-translate-key="faq_title">Frequently Asked Questions</h2>
                <p class="section-subtitle" data-translate-key="faq_subtitle">Have questions? We've got answers. If you don't see yours here, feel free to <a href="upricing.html#contact-section" class="link">contact our team</a>.</p>
                <div class="faq-accordion">
                    {/* ... FAQ items with data-translate-key for questions and answers ... */}
                    <details class="faq-item">
                        <summary class="faq-item__question" data-translate-key="faq1_question">Will AI take my job?</summary>
                        <div class="faq-item__answer">
                            <p data-translate-key="faq1_answer">It's a valid concern! While AI automates some tasks, it primarily *changes* jobs, creating new roles and demanding new skills...</p>
                        </div>
                    </details>
                </div>
            </div>
        </section>
    </main>

    <footer class="footer" id="page-footer">
        <div class="footer__container container">
             <div class="footer__section footer__section--contact">
                <h3 class="footer__heading" data-translate-key="footer_contact_us">Get in Touch</h3>
                 <address class="footer__address">
                    <p><i class="fas fa-phone footer__icon" aria-hidden="true"></i> <a href="tel:+254708654984" class="footer__link">+254 708 654 984</a></p>
                    <p><i class="fas fa-envelope footer__icon" aria-hidden="true"></i> <a href="mailto:support@uplas.com" class="footer__link">support@uplas.com</a></p>
                    <p><i class="fas fa-map-marker-alt footer__icon" aria-hidden="true"></i> <span data-translate-key="footer_location">Uplas Towers, Kilifi, Kenya</span></p>
                </address>
            </div>
             <div class="footer__section footer__section--social">
                <h3 class="footer__heading" data-translate-key="footer_follow_us">Connect With Us</h3>
                {/* ... social media links ... */}
            </div>
            <div class="footer__section footer__section--links">
                <h3 class="footer__heading" data-translate-key="footer_explore_uplas">Explore Uplas</h3>
                <ul class="footer__list">
                    <li><a href="index.html" class="footer__link" data-translate-key="nav_home">Home</a></li>
                    {/* ... other links ... */}
                </ul>
            </div>
             <div class="footer__section footer__section--legal">
                <h3 class="footer__heading" data-translate-key="footer_legal_support">Legal & Support</h3>
                 <ul class="footer__list">
                    <li><a href="/terms" class="footer__link" data-translate-key="footer_terms">Terms of Service</a></li>
                    {/* ... other links ... */}
                </ul>
            </div>
        </div>
        <div class="footer__bottom">
            <p class="footer__copyright" data-translate-key="footer_copyright">&copy; <span id="current-year-footer">2025</span> Uplas EdTech Solutions Ltd. All rights reserved. Empowering the next generation of AI innovators.</p>
        </div>
    </footer>

    <script src="js/global.js"></script>
    <script src="js/apiUtils.js"></script>
    <script src="js/uhome.js"></script>
</body>
</html>
```

```css
/* css/global.css */
/* ================================================
   Uplas Global Styles (global.css)
   - Apply to common HTML elements, base layout utilities
   - Relies on variables from variables.css
   ================================================ */
@import url('variables.css');

/* --- Base HTML & Body --- */
html {
    font-size: var(--font-size-base);
    scroll-behavior: smooth;
    scroll-padding-top: var(--header-height, 70px); /* Offset for fixed header */
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

body {
    font-family: var(--font-primary);
    background-color: var(--current-bg-color);
    color: var(--current-text-color);
    margin: 0;
    padding: 0;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    line-height: var(--line-height-base);
    transition: background-color var(--transition-base), color var(--transition-base);
    padding-top: var(--header-height, 70px); /* Space for fixed header */
}

/* --- Basic Reset & Typography --- */
*, *::before, *::after { box-sizing: border-box; margin: 0; padding: 0; }
img, picture, video, canvas, svg { display: block; max-width: 100%; height: auto; }
input, button, textarea, select { font: inherit; border: none; background: none; color: inherit; -webkit-appearance: none; -moz-appearance: none; appearance: none;}
button { cursor: pointer; }
fieldset { border: none; } legend { padding: 0; font-weight: var(--font-weight-semibold); margin-bottom: var(--spacing-sm); }

h1, h2, h3, h4, h5, h6 {
    line-height: var(--line-height-heading);
    font-weight: var(--font-weight-semibold);
    color: var(--current-text-color);
    margin-bottom: var(--spacing-md);
}
h1 { font-size: var(--font-size-xxl); font-weight: var(--font-weight-bold); }
h2 { font-size: var(--font-size-xl); }
h3 { font-size: var(--font-size-lg); }
h4 { font-size: var(--font-size-md); }
p { margin-bottom: var(--spacing-md); line-height: var(--line-height-base); }
ul, ol { list-style-position: outside; padding-left: var(--spacing-lg); margin-bottom: var(--spacing-md); }
li { margin-bottom: var(--spacing-xs); }
a {
    color: var(--current-link-color);
    text-decoration: none;
    transition: color var(--transition-short), opacity var(--transition-short);
}
a:hover, a:focus-visible {
    color: var(--current-link-hover-color);
    text-decoration: none; /* Or underline if preferred globally */
}

/* --- Utility Classes --- */
.container {
    width: 100%;
    max-width: var(--container-max-width);
    margin-left: auto;
    margin-right: auto;
    padding-left: var(--container-padding-x);
    padding-right: var(--container-padding-x);
}
.sr-only { /* Screen reader only */
    position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px;
    overflow: hidden; clip: rect(0,0,0,0); white-space: nowrap; border: 0;
}

/* --- Focus Visible Polyfill (basic, or use a library) --- */
*:focus:not(:focus-visible) { outline: none; }
*:focus-visible {
    outline: var(--border-width-bold) solid var(--color-accent);
    outline-offset: 2px;
    box-shadow: 0 0 0 3px rgba(244, 162, 97, 0.35); /* Accent focus ring */
    border-radius: var(--border-radius-sm); /* Optional rounded focus outline */
}


/* --- Global Button Styles --- */
.button {
    display: inline-flex; align-items: center; justify-content: center;
    gap: var(--spacing-xs); padding: var(--spacing-sm) var(--spacing-lg);
    font-family: var(--font-primary); font-weight: var(--font-weight-medium);
    font-size: var(--font-size-sm); border-radius: var(--border-radius-md);
    border: var(--border-width-bold) solid transparent; cursor: pointer;
    text-align: center; text-decoration: none; white-space: nowrap;
    transition: all var(--transition-base);
    box-shadow: var(--box-shadow-xs);
}
.button:hover { transform: translateY(-2px); box-shadow: var(--box-shadow-md); }
.button:active { transform: translateY(0); box-shadow: var(--box-shadow-xs); }
.button:disabled, .button[disabled] {
    opacity: 0.6; cursor: not-allowed; transform: none; box-shadow: none;
    background-color: var(--current-border-color) !important;
    color: var(--current-text-color-secondary) !important;
    border-color: var(--current-border-color) !important;
}
.button i { margin-right: var(--spacing-xs); font-size: 0.9em; }
.button--large { padding: var(--spacing-md) var(--spacing-xl); font-size: var(--font-size-md); font-weight: var(--font-weight-semibold); }
.button--small { padding: var(--spacing-xs) var(--spacing-sm); font-size: var(--font-size-xs); }
.button--extra-small { padding: var(--spacing-xxs) var(--spacing-sm); font-size: var(--font-size-xs); font-weight: var(--font-weight-medium); line-height: 1.3; border-width: var(--border-width); }
.button--full-width { width: 100%; }

.button--primary {
    background-color: var(--current-button-primary-bg);
    color: var(--current-button-primary-text);
    border-color: var(--current-button-primary-border);
    font-weight: var(--font-weight-semibold);
}
.button--primary:hover, .button--primary:focus-visible {
    background-color: var(--current-button-primary-hover-bg);
    border-color: var(--current-button-primary-hover-bg); /* Often same as bg for primary */
}

.button--secondary {
    background-color: var(--current-button-secondary-bg);
    color: var(--current-button-secondary-text);
    border-color: var(--current-button-secondary-border);
}
.button--secondary:hover, .button--secondary:focus-visible {
    background-color: var(--current-button-secondary-hover-bg);
    color: var(--current-button-secondary-hover-text);
    border-color: var(--current-button-secondary-hover-bg); /* Often same as bg for secondary hover */
}

/* --- Global Form Element Styles (base, can be overridden by page-specific CSS) --- */
.form__group { margin-bottom: var(--spacing-lg); position: relative; }
.form__label {
    display: block; font-weight: var(--font-weight-medium);
    margin-bottom: var(--spacing-xs);
    font-size: var(--font-size-sm); color: var(--current-text-color);
}
.form__input, .form__select, .form__textarea {
    width: 100%; padding: var(--spacing-sm) var(--spacing-md);
    border: var(--border-width) solid var(--current-input-border-color);
    border-radius: var(--border-radius-md);
    background-color: var(--current-input-bg);
    color: var(--current-input-text-color);
    font-size: 0.95rem; line-height: 1.5;
    transition: border-color var(--transition-short), box-shadow var(--transition-short);
}
.form__input::placeholder, .form__textarea::placeholder {
    color: var(--current-input-placeholder-color); opacity: 0.8;
}
.form__input:focus, .form__select:focus, .form__textarea:focus {
    border-color: var(--color-primary);
    box-shadow: var(--box-shadow-focus);
    outline: none;
}
.form__input.invalid, .form__select.invalid, .form__textarea.invalid {
    border-color: var(--color-error) !important;
    box-shadow: var(--box-shadow-focus-error) !important;
}
.form__error-message {
    display: block; color: var(--color-error);
    font-size: var(--font-size-xs);
    margin-top: var(--spacing-xxs);
    min-height: 1.2em;
}
.form__hint {
    display: block; font-size: var(--font-size-xs);
    color: var(--current-text-color-secondary);
    margin-top: var(--spacing-xxs);
}
.form__select { /* Custom select arrow */
  appearance: none;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23${var(--current-text-color-secondary).replace("#", "")}' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right var(--spacing-md) center;
  background-size: 1em;
  padding-right: calc(var(--spacing-md) + 1.5em); /* Space for arrow */
}
.dark-mode .form__select {
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23${var(--color-dark-text-secondary).replace("#", "")}' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
}

/* --- Header Language & Currency Selectors --- */
.language-currency-selectors {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
}
.select-wrapper {
    position: relative;
    display: flex;
    align-items: center;
}
.selector-icon {
    position: absolute;
    left: var(--spacing-sm);
    font-size: 0.9em;
    color: var(--current-text-color-secondary);
    pointer-events: none; /* Allow click on select */
}
.header-select {
    background-color: var(--current-input-bg);
    color: var(--current-text-color);
    border: 1px solid var(--current-border-color);
    border-radius: var(--border-radius-md);
    padding: var(--spacing-xs) var(--spacing-sm) var(--spacing-xs) calc(var(--spacing-sm) + 20px); /* Space for icon */
    font-size: var(--font-size-xs);
    font-weight: var(--font-weight-medium);
    appearance: none; /* Remove default arrow */
    -webkit-appearance: none;
    -moz-appearance: none;
    cursor: pointer;
    min-width: 80px; /* Adjust as needed */
    height: 32px; /* Match theme button approx height */
    line-height: 1;
}
.header-select:hover {
    border-color: var(--color-primary);
}
/* Hide default select arrow for browsers that don't support appearance:none well for select */
.header-select::-ms-expand { display: none; }

@media (max-width: 991px) {
    .language-currency-selectors {
        /* Decide how to handle these on mobile: hide, move to menu, or stack */
        display: none; /* Simplest option: hide in mobile header, move to menu if critical */
    }
}
```

```css
/* css/uhome.css */
/* ================================================
   Uplas Homepage Styles (uhome.css)
   ================================================ */

/* Import Global Styles & Variables */
@import url('global.css'); /* This should already include variables.css */

/* --- Hero Section --- */
.hero-section {
    padding: var(--spacing-xxl) 0;
    background-color: var(--current-bg-color);
    text-align: center;
    overflow: hidden; /* For potential animations or skewed backgrounds later */
}
.hero-section__container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-xl);
}
.hero-section__text-content {
    max-width: 750px;
}
.hero-section__title {
    font-size: var(--font-size-hero);
    font-weight: var(--font-weight-bold);
    color: var(--current-text-color);
    line-height: 1.2;
    margin-bottom: var(--spacing-md);
}
.dark-mode .hero-section__title { color: var(--color-primary-light); }

.hero-section__subtitle {
    font-size: clamp(1.1rem, 3vw, 1.35rem);
    color: var(--current-text-color-secondary);
    margin-bottom: var(--spacing-lg);
    line-height: 1.7;
}
.hero-section__cta-group {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-md);
    justify-content: center;
    margin-top: var(--spacing-lg);
}
.hero-section__cta { min-width: 200px; }

.hero-section__media-content {
    width: 100%;
    max-width: 600px;
    border-radius: var(--border-radius-lg);
    overflow: hidden;
    box-shadow: var(--box-shadow-lg);
}
.video-responsive-container {
    position: relative;
    padding-top: 56.25%; /* 16:9 Aspect Ratio */
    height: 0;
    overflow: hidden;
    background-color: var(--current-border-color);
}
.video-responsive-container iframe,
.video-responsive-container img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: 0;
}

@media (min-width: 992px) {
    .hero-section { padding: var(--spacing-xxxl) 0; text-align: left; }
    .hero-section__container {
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
    }
    .hero-section__text-content { flex: 1 1 55%; max-width: none; }
    .hero-section__media-content { flex: 1 1 40%; }
    .hero-section__cta-group { justify-content: flex-start; }
}

/* --- Benefits Section (New) --- */
.benefits-section {
    padding: var(--spacing-xxl) 0;
    background-color: var(--current-card-bg); /* Or a slightly different shade like --color-gray-100 */
}
.dark-mode .benefits-section {
    background-color: var(--color-dark-bg-panel);
}
.benefits-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: var(--spacing-xl);
    margin-top: var(--spacing-xl);
}
.benefit-item {
    text-align: center;
    padding: var(--spacing-lg);
    background-color: var(--current-bg-color); /* Inset effect */
    border-radius: var(--border-radius-lg);
    box-shadow: var(--box-shadow-sm);
    transition: transform var(--transition-base), box-shadow var(--transition-base);
}
.dark-mode .benefit-item {
    background-color: var(--color-dark-bg-secondary);
}
.benefit-item:hover {
    transform: translateY(-5px);
    box-shadow: var(--box-shadow-md);
}
.benefit-item__icon {
    width: 60px; /* Control size of placeholder images */
    height: 60px;
    border-radius: 50%;
    margin: 0 auto var(--spacing-md) auto;
    object-fit: cover; /* If using actual images */
    /* For text placeholders if not using img tag:
    font-size: 2.5rem;
    color: var(--color-primary);
    display: inline-flex; align-items: center; justify-content: center;
    background-color: var(--color-primary-ultralight);
    */
}
.benefit-item__title {
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-semibold);
    color: var(--current-text-color);
    margin-bottom: var(--spacing-sm);
}
.dark-mode .benefit-item__title { color: var(--color-primary-light); }
.benefit-item p {
    font-size: var(--font-size-sm);
    color: var(--current-text-color-secondary);
    line-height: 1.6;
    margin-bottom: 0;
}

/* --- Feature Highlight Section (Course Description Image) --- */
.feature-highlight-section {
    padding: var(--spacing-xxl) 0;
    background-color: var(--current-bg-color); /* Can match hero or be distinct */
}
#course-description-image-section { /* Specific ID if needed */
    background-color: var(--current-card-bg); /* Giving it a panel look */
    padding-top: var(--spacing-xxl);
    padding-bottom: var(--spacing-xxl);
}
.dark-mode #course-description-image-section {
    background-color: var(--color-dark-bg-panel);
}
.feature-highlight__container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-xl);
}
.feature-highlight__image-container {
    flex: 1;
    max-width: 550px; /* Adjust as needed */
    width: 100%;
    border-radius: var(--border-radius-xl);
    overflow: hidden;
    box-shadow: var(--box-shadow-lg);
}
.feature-highlight__image {
    width: 100%;
    height: auto;
    object-fit: cover;
}
.feature-highlight__text-content {
    flex: 1;
    max-width: 600px;
}
.feature-highlight__text-content .section-title {
    margin-bottom: var(--spacing-md);
    text-align: left;
}
.feature-highlight__text-content p {
    font-size: var(--font-size-md);
    color: var(--current-text-color-secondary);
    margin-bottom: var(--spacing-lg);
    line-height: 1.7;
}
@media (min-width: 992px) {
    .feature-highlight__container {
        flex-direction: row;
        gap: var(--spacing-xxxl);
        align-items: center;
    }
    /* Alternate image left/right */
    #course-description-image-section .feature-highlight__image-container { order: 0; }
    #course-description-image-section .feature-highlight__text-content { order: 1; }
}


/* --- Authentication Section & Forms --- */
.auth-section {
    padding: var(--spacing-xxl) 0;
    background-color: var(--color-gray-100); /* A slightly different background for this section */
}
.dark-mode .auth-section {
    background-color: var(--color-dark-bg-primary);
}
.auth-section__container { max-width: 600px; }

.auth-toggle-buttons { /* Styles defined in global.css or page-specific CSS */ }
.form-wrapper { /* Styles defined in global.css or page-specific CSS */ }
.form { /* Styles defined in global.css or page-specific CSS */ }
.form__title { /* Styles defined in global.css or page-specific CSS */ }
.form-step { /* Styles defined in global.css or page-specific CSS */ }
.form__step-indicator { /* Styles defined in global.css or page-specific CSS */ }


/* --- FAQ Section --- */
.faq-section { padding: var(--spacing-xxl) 0; }
.faq-accordion { max-width: 800px; margin: var(--spacing-xl) auto 0 auto; }
.faq-item { /* Styles defined in global.css or page-specific CSS */ }
.faq-item__question { /* Styles defined in global.css or page-specific CSS */ }
.faq-item__answer { /* Styles defined in global.css or page-specific CSS */ }


/* --- Footer Styles --- */
/* Footer styles will primarily come from global.css if you add one, or be defined here using variables.css */
/* Copied from previous global.css for completeness if global.css is not created yet */
.footer {
    background-color: var(--current-footer-bg);
    color: var(--current-footer-text-color);
    padding: var(--spacing-xxl) 0 var(--spacing-lg) 0;
    margin-top: auto;
}
.footer__container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    gap: var(--spacing-xl);
    text-align: left;
}
.footer__heading {
    font-size: 1.1rem;
    font-weight: var(--font-weight-semibold);
    margin-bottom: var(--spacing-md);
    color: var(--color-white);
}
.dark-mode .footer__heading { color: var(--color-dark-text-primary); }
.footer__address p { margin: var(--spacing-xs) 0; font-size: 0.9rem; opacity: 0.9; line-height: 1.6; }
.footer__icon { margin-right: var(--spacing-sm); opacity: 0.8; font-size: 0.9em; }
.footer__link { color: inherit; opacity: 0.9; transition: color var(--transition-short), opacity var(--transition-short); text-decoration: none; }
.footer__link:hover { color: var(--color-primary-light); opacity: 1; text-decoration: underline;}
.footer__list { list-style: none; padding: 0; margin: 0; }
.footer__list li { margin-bottom: var(--spacing-sm); }
.social-media { display: flex; gap: var(--spacing-md); }
.social-media__link {
    color: inherit; font-size: 1.35rem; opacity: 0.8;
    text-decoration: none; width: 40px; height: 40px;
    display: inline-flex; align-items: center; justify-content: center;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.05);
    transition: background-color var(--transition-base), color var(--transition-base), transform var(--transition-base);
}
.social-media__link:hover {
    color: var(--color-white);
    background-color: var(--color-primary);
    transform: translateY(-2px); opacity: 1;
}
.footer__bottom {
    text-align: center; margin-top: var(--spacing-xl);
    padding-top: var(--spacing-lg);
    border-top: var(--border-width) solid rgba(255, 255, 255, 0.1);
}
.dark-mode .footer__bottom { border-top-color: rgba(255,255,255,0.08); }
.footer__copyright { font-size: 0.85rem; opacity: 0.8; margin: 0; }

/* --- Responsive Adjustments specific to uhome.css --- */
@media (max-width: 767px) {
    .value-prop__grid { grid-template-columns: 1fr; }
    #course-description-image-section .feature-highlight__container {
        flex-direction: column-reverse; /* Stack image above text on mobile */
    }
}

```

```javascript
// js/uhome.js
/* ================================================
   Uplas Homepage Specific JavaScript (uhome.js)
   - Multi-step Signup Form Logic
   - Login Form Logic
   - Form Switching
   - API Integration Placeholders
   ================================================ */
'use strict';

document.addEventListener('DOMContentLoaded', () => {
    // --- Element Selectors ---
    const authSection = document.getElementById('auth-section');
    const signupForm = document.getElementById('signup-form');
    const loginForm = document.getElementById('login-form');
    const authToggleButtons = document.querySelectorAll('.auth-toggle-button');

    // Signup Form Specific
    const signupFormSteps = signupForm?.querySelectorAll('.form-step');
    const signupCountryCodeSelect = document.getElementById('signup-country-code');
    const signupIndustrySelect = document.getElementById('signup-industry');
    const signupOtherIndustryGroup = document.getElementById('signup-other-industry-group');
    const signupOtherIndustryInput = document.getElementById('signup-other-industry');
    const signupPasswordInput = document.getElementById('signup-password');
    const signupConfirmPasswordInput = document.getElementById('signup-confirm-password');
    const signupPasswordMismatchSpan = document.getElementById('signup-password-mismatch');
    const signupStatusDiv = document.getElementById('signup-status');
    const signupTermsCheckbox = document.getElementById('signup-terms');

    // Login Form Specific
    const loginEmailInput = document.getElementById('login-email');
    const loginPasswordInput = document.getElementById('login-password');
    const loginStatusDiv = document.getElementById('login-status');

    // --- State Variables ---
    let currentSignupStep = 0;

    // --- Utility Functions ---
    const displayFormStatus = (element, message, type, translateKey = null) => {
        if (!element) return;
        // If a translateKey is provided, try to use it (assuming i18n is set up)
        const text = translateKey && window.uplasTranslate ? window.uplasTranslate(translateKey) : message;
        element.textContent = text;
        element.className = 'form__status';
        if (type) element.classList.add(`form__status--${type}`);
        element.style.display = 'block';
        element.setAttribute('aria-live', type === 'error' ? 'assertive' : 'polite');
    };

    const clearFormStatus = (element) => {
        if (!element) return;
        element.textContent = '';
        element.style.display = 'none';
        element.className = 'form__status';
    };

    const validateInput = (inputElement) => {
        const errorSpan = inputElement.closest('.form__group')?.querySelector('.form__error-message');
        if (!inputElement.checkValidity()) {
            inputElement.classList.add('invalid');
            if (errorSpan) {
                // Prioritize custom messages if available
                if (inputElement.validity.valueMissing) errorSpan.textContent = inputElement.dataset.errorRequired || inputElement.validationMessage;
                else if (inputElement.validity.patternMismatch) errorSpan.textContent = inputElement.dataset.errorPattern || inputElement.validationMessage;
                else if (inputElement.validity.typeMismatch) errorSpan.textContent = inputElement.dataset.errorType || inputElement.validationMessage;
                else errorSpan.textContent = inputElement.validationMessage;
            }
            return false;
        } else {
            inputElement.classList.remove('invalid');
            if (errorSpan) errorSpan.textContent = '';
            return true;
        }
    };

    // --- Form Switching Logic ---
    authToggleButtons.forEach(button => {
        button.addEventListener('click', () => {
            const targetFormId = button.dataset.form;
            const targetForm = document.getElementById(targetFormId);

            authToggleButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');

            if (signupForm) signupForm.classList.remove('form--active');
            if (loginForm) loginForm.classList.remove('form--active');

            if (targetForm) {
                targetForm.classList.add('form--active');
                if (targetFormId === 'signup-form') {
                    resetSignupFormSteps();
                    clearFormStatus(signupStatusDiv);
                } else {
                    clearFormStatus(loginStatusDiv);
                }
                const firstInput = targetForm.querySelector('input:not([type="hidden"]), select, textarea');
                firstInput?.focus();
            }
        });
    });

    const handleHashChange = () => { /* ... (same as before, using uplasScrollToElement) ... */ };
    window.addEventListener('hashchange', handleHashChange);
    handleHashChange();


    // --- Multi-Step Signup Form Logic ---
    const resetSignupFormSteps = () => {
        currentSignupStep = 0;
        if (signupFormSteps && signupFormSteps.length > 0) {
            showSignupStep(currentSignupStep);
            // Optionally clear all inputs and validation states in the signup form
            signupForm?.reset();
            signupForm?.querySelectorAll('.invalid').forEach(el => el.classList.remove('invalid'));
            signupForm?.querySelectorAll('.form__error-message').forEach(el => el.textContent = '');
            if (signupOtherIndustryGroup) signupOtherIndustryGroup.classList.add('form__group--hidden');
        }
    };
    
    const showSignupStep = (stepIndex) => {
        if (!signupFormSteps || !signupFormSteps[stepIndex]) return;
        signupFormSteps.forEach((stepElement, index) => {
            stepElement.classList.toggle('form-step--active', index === stepIndex);
        });
        const activeStep = signupFormSteps[stepIndex];
        const firstInput = activeStep?.querySelector('input:not([type="hidden"]), select, textarea');
        firstInput?.focus();
        currentSignupStep = stepIndex; // Ensure currentStep is updated
    };

    const validateSignupStep = (stepElement) => {
        if (!stepElement) return true;
        let isStepValid = true;
        const inputsToValidate = stepElement.querySelectorAll('input[required]:not([type="hidden"]), select[required]:not([type="hidden"])');

        inputsToValidate.forEach(input => {
            if (input.id === 'signup-other-industry' && signupOtherIndustryGroup?.classList.contains('form__group--hidden')) {
                // Skip validation if 'other industry' is hidden
                input.classList.remove('invalid');
                const errorSpan = input.closest('.form__group')?.querySelector('.form__error-message');
                if (errorSpan) errorSpan.textContent = '';
                return;
            }
            if (!validateInput(input)) isStepValid = false;
        });

        // Specific validation for last step (passwords and terms)
        if (stepElement.dataset.step === '5') {
            if (signupPasswordInput && signupConfirmPasswordInput && signupPasswordInput.value !== signupConfirmPasswordInput.value) {
                signupConfirmPasswordInput.classList.add('invalid');
                if (signupPasswordMismatchSpan) signupPasswordMismatchSpan.textContent = "Passwords do not match.";
                isStepValid = false;
            } else {
                if (signupPasswordMismatchSpan) signupPasswordMismatchSpan.textContent = "";
                 // If passwords match now, remove invalid state from confirm if it was only due to mismatch
                if(signupConfirmPasswordInput && signupPasswordInput?.value === signupConfirmPasswordInput.value) {
                     signupConfirmPasswordInput.classList.remove('invalid');
                }
            }
            if (signupTermsCheckbox && !signupTermsCheckbox.checked) {
                const termsErrorSpan = signupTermsCheckbox.closest('.form__group')?.querySelector('.form__error-message');
                if(termsErrorSpan) termsErrorSpan.textContent = "You must agree to the terms to continue.";
                isStepValid = false;
            } else {
                const termsErrorSpan = signupTermsCheckbox?.closest('.form__group')?.querySelector('.form__error-message');
                if(termsErrorSpan) termsErrorSpan.textContent = "";
            }
        }
        return isStepValid;
    };

    const nextSignupStep = () => {
        if (!signupFormSteps || currentSignupStep >= signupFormSteps.length - 1) return;
        const currentFormStepElement = signupFormSteps[currentSignupStep];
        if (validateSignupStep(currentFormStepElement)) {
            showSignupStep(currentSignupStep + 1);
        }
    };

    const prevSignupStep = () => {
        if (currentSignupStep > 0) {
            showSignupStep(currentSignupStep - 1);
            clearFormStatus(signupStatusDiv);
        }
    };

    signupForm?.querySelectorAll('.form__button--next').forEach(button => {
        button.addEventListener('click', nextSignupStep);
    });
    signupForm?.querySelectorAll('.form__button--prev').forEach(button => {
        button.addEventListener('click', prevSignupStep);
    });

    // Industry Dropdown -> Other Input Field
    if (signupIndustrySelect && signupOtherIndustryGroup && signupOtherIndustryInput) {
        signupIndustrySelect.addEventListener('change', () => {
            const showOther = signupIndustrySelect.value === 'Other';
            signupOtherIndustryGroup.classList.toggle('form__group--hidden', !showOther);
            signupOtherIndustryInput.required = showOther;
            if (!showOther) {
                signupOtherIndustryInput.value = '';
                validateInput(signupOtherIndustryInput); // Clear potential errors
            }
        });
    }

    // Real-time Password Confirmation
    if (signupPasswordInput && signupConfirmPasswordInput && signupPasswordMismatchSpan) {
        const checkPasswordMatch = () => {
            if (signupPasswordInput.value !== signupConfirmPasswordInput.value && signupConfirmPasswordInput.value !== '') {
                signupPasswordMismatchSpan.textContent = "Passwords do not match.";
                signupConfirmPasswordInput.classList.add('invalid');
            } else {
                signupPasswordMismatchSpan.textContent = '';
                if (signupPasswordInput.value === signupConfirmPasswordInput.value) {
                    signupConfirmPasswordInput.classList.remove('invalid'); // Only remove if it matches
                }
            }
        };
        signupConfirmPasswordInput.addEventListener('input', checkPasswordMatch);
        signupPasswordInput.addEventListener('input', checkPasswordMatch); // Check also when original password changes
    }


    // --- Populate Country Codes ---
    const populateCountryCodes = () => {
        if (!signupCountryCodeSelect) return;
        const countryCodes = [ /* ... (same extensive list as before) ... */
            { code: '+1', flag: '🇺🇸', name: 'United States' },
            { code: '+44', flag: '🇬🇧', name: 'United Kingdom' },
            { code: '+254', flag: '🇰🇪', name: 'Kenya' },
            // Add many more here, this is just a snippet
        ];
        signupCountryCodeSelect.innerHTML = '<option value="" disabled selected>Code</option>';
        countryCodes.forEach(country => {
            const option = document.createElement('option');
            option.value = country.code;
            option.textContent = `${country.flag} ${country.code}`;
            signupCountryCodeSelect.appendChild(option);
        });
        // Attempt to pre-select based on common regions or a default like Kenya
        if (countryCodes.find(c => c.code === '+254')) {
             signupCountryCodeSelect.value = '+254';
        }
    };
    populateCountryCodes();


    // --- Signup Form Submission ---
    const handleSignupSubmit = async (e) => {
        e.preventDefault();
        if (!signupForm || !validateSignupStep(signupFormSteps[currentSignupStep])) { // Validate final step
            displayFormStatus(signupStatusDiv, 'Please correct the errors above.', 'error');
            return;
        }
        clearFormStatus(signupStatusDiv);
        displayFormStatus(signupStatusDiv, 'Processing signup...', 'loading');
        const submitButton = signupForm.querySelector('button[type="submit"]');
        if (submitButton) submitButton.disabled = true;

        const formData = new FormData(signupForm);
        const dataToSend = {};
        formData.forEach((value, key) => {
            // Remap keys if necessary to match backend expectations
            if (key === 'fullName') dataToSend['full_name'] = value;
            else if (key === 'countryCode' || key === 'phone') return; // Handled separately
            else if (key === 'confirmPassword' || key === 'terms') return; // Don't send these
            else dataToSend[key] = value;
        });
        if (formData.get('countryCode') && formData.get('phone')) {
            dataToSend['whatsapp_number'] = `${formData.get('countryCode')}${formData.get('phone')}`;
        }
        if (signupIndustrySelect.value === 'Other' && signupOtherIndustryInput.value) {
            dataToSend['industry'] = signupOtherIndustryInput.value; // Send the 'other' value
        }


        try {
            console.log("Simulating Signup with data:", dataToSend);
            // TODO: Replace with actual API call using fetchAuthenticated (if signup needs auth) or basic fetch
            // const response = await fetch('/api/users/register/', { // Example endpoint
            //     method: 'POST',
            //     headers: { 'Content-Type': 'application/json', 'X-CSRFToken': window.uplasGetCookie('csrftoken') },
            //     body: JSON.stringify(dataToSend),
            // });
            // const result = await response.json();

            // Simulate API response
            await new Promise(resolve => setTimeout(resolve, 1500));
            const result = { success: true, message: 'Signup successful! Verification code sent to WhatsApp.' };


            if (result.success) {
                displayFormStatus(signupStatusDiv, result.message || 'Signup successful! Redirecting...', 'success');
                // setTimeout(() => { window.location.href = 'ucourse.html'; }, 2000);
            } else {
                displayFormStatus(signupStatusDiv, result.message || 'Signup failed. Please check your details.', 'error');
            }
        } catch (error) {
            console.error('Signup Error:', error);
            displayFormStatus(signupStatusDiv, 'A network error occurred. Please try again.', 'error');
        } finally {
            if (submitButton) submitButton.disabled = false;
        }
    };
    if (signupForm) signupForm.addEventListener('submit', handleSignupSubmit);


    // --- Login Form Submission ---
    const handleLoginSubmit = async (e) => {
        e.preventDefault();
        if (!loginForm) return;
        clearFormStatus(loginStatusDiv);

        let isFormValid = true;
        if (!validateInput(loginEmailInput)) isFormValid = false;
        if (!validateInput(loginPasswordInput)) isFormValid = false;

        if (!isFormValid) {
            displayFormStatus(loginStatusDiv, 'Please correct the errors above.', 'error');
            return;
        }

        displayFormStatus(loginStatusDiv, 'Attempting login...', 'loading');
        const submitButton = loginForm.querySelector('button[type="submit"]');
        if (submitButton) submitButton.disabled = true;

        const loginData = {
            email: loginEmailInput.value, // Or 'username' if backend expects that
            password: loginPasswordInput.value
        };

        try {
            console.log("Simulating Login with data:", loginData);
            // TODO: Replace with actual API call using fetch (tokens typically handled by /api/token/)
            // const response = await fetch('/api/users/login/', { // Or your token endpoint
            //     method: 'POST',
            //     headers: { 'Content-Type': 'application/json', 'X-CSRFToken': window.uplasGetCookie('csrftoken') },
            //     body: JSON.stringify(loginData)
            // });
            // const result = await response.json();

            // Simulate API response
            await new Promise(resolve => setTimeout(resolve, 1500));
            const result = { success: true, message: 'Login successful! Redirecting...', access: 'fake_access_token', refresh: 'fake_refresh_token' };
            // const result = { success: false, detail: 'Invalid credentials.' }; // Simulate error


            if (result.success && result.access) {
                localStorage.setItem('accessToken', result.access);
                localStorage.setItem('refreshToken', result.refresh);
                displayFormStatus(loginStatusDiv, result.message || 'Login successful! Redirecting...', 'success');
                // setTimeout(() => { window.location.href = 'ucourse.html'; }, 1500);
            } else {
                displayFormStatus(loginStatusDiv, result.detail || result.message || 'Login failed. Please check your credentials.', 'error');
            }
        } catch (error) {
            console.error('Login Error:', error);
            displayFormStatus(loginStatusDiv, 'A network error occurred. Please try again.', 'error');
        } finally {
            if (submitButton) submitButton.disabled = false;
        }
    };
    if (loginForm) loginForm.addEventListener('submit', handleLoginSubmit);

    // Initial setup for form visibility
    const initialForm = loginForm?.classList.contains('form--active') ? loginForm : signupForm;
    if (initialForm) {
         const firstInput = initialForm.querySelector('input:not([type="hidden"]), select, textarea');
         firstInput?.focus();
    } else if(signupForm) { // Default to signup if no active form is set by hash
        signupForm.classList.add('form--active');
        loginForm?.classList.remove('form--active');
        document.querySelector('.auth-toggle-button[data-form="signup-form"]')?.classList.add('active');
        document.querySelector('.auth-toggle-button[data-form="login-form"]')?.classList.remove('active');
        const firstInput = signupForm.querySelector('input:not([type="hidden"]), select, textarea');
        firstInput?.focus();
    }


    // Add listeners to clear validation on input for all relevant inputs
    document.querySelectorAll('#signup-form input[required], #signup-form select[required], #login-form input[required]').forEach(input => {
        input.addEventListener('input', () => {
             // For most inputs, just checkValidity is fine for clearing.
            if(input.checkValidity()){
                input.classList.remove('invalid');
                const errorSpan = input.closest('.form__group')?.querySelector('.form__error-message');
                if (errorSpan) errorSpan.textContent = '';
            }
            // Special handling for confirm password to also clear the mismatch message
            if(input.id === 'signup-confirm-password' || input.id === 'signup-password') {
                if(signupPasswordInput?.value === signupConfirmPasswordInput?.value) {
                    if(signupPasswordMismatchSpan) signupPasswordMismatchSpan.textContent = '';
                    // If confirm was only invalid due to mismatch, and now it matches, clear its invalid state
                    if(signupConfirmPasswordInput?.value === signupPasswordInput?.value) {
                        signupConfirmPasswordInput.classList.remove('invalid');
                        const confirmErrorSpan = signupConfirmPasswordInput.closest('.form__group')?.querySelector('.form__error-message');
                        if(confirmErrorSpan && confirmErrorSpan.textContent === "Passwords do not match.") { // only if that was the error
                           confirmErrorSpan.textContent = '';
                        }
                    }
                }
            }
        });
    });


    console.log("Uplas uhome.js loaded and initialized.");
});
